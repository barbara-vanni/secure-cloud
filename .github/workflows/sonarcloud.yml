name: SonarCloud Analysis

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  sonarqube:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install all dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git cmake g++ build-essential wget unzip \
            gcovr lcov uuid-dev openssl libssl-dev zlib1g-dev libjsoncpp-dev \
            libcurl4-openssl-dev nlohmann-json3-dev
          
          # Clone Drogon avec son sous-module Trantor
          git clone --recurse-submodules https://github.com/drogonframework/drogon.git
          cd drogon
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          sudo make -j"$(nproc)" install

      - name: Clean old build-wrapper
        run: |
          rm -rf build-wrapper
          rm -rf bw-output

      - name: Download latest build-wrapper
        run: |
          mkdir -p build-wrapper
          curl -sSLo build-wrapper/build-wrapper-linux-x86.zip \
            https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip -o build-wrapper/build-wrapper-linux-x86.zip -d build-wrapper

      - name: Build all microservices with Build Wrapper
        run: |
          set -e  # stop on error
          
          # Nettoyage ancien build wrapper output
          rm -rf bw-output
          mkdir -p bw-output
          
          # Décompression du build-wrapper Linux x86-64
          unzip -o build-wrapper/build-wrapper-linux-x86.zip -d build-wrapper
          chmod +x build-wrapper/build-wrapper-linux-x86/build-wrapper-linux-x86-64
          
          # Chemin du build-wrapper
          BW="./build-wrapper/build-wrapper-linux-x86/build-wrapper-linux-x86-64"
          
          # Vérifier que le binaire est exécutable et toutes les libs sont présentes
          if ! $BW --version; then
            echo "Erreur: Build Wrapper non exécutable ou librairies manquantes"
            ldd $BW
            exit 1
          fi
          
          # Liste des services à compiler
          SERVICES=("auth-service" "files-service" "messaging-service" "audit-service")
          
          # Compilation avec build-wrapper
          for SERVICE in "${SERVICES[@]}"; do
            echo "=== Building $SERVICE ==="
            rm -rf $SERVICE/build
            mkdir -p $SERVICE/build
            cd $SERVICE/build
          
            # Génération des Makefiles
            cmake -DCMAKE_BUILD_TYPE=Debug \
                  -DCMAKE_CXX_FLAGS="--coverage" \
                  -DCMAKE_PREFIX_PATH=/usr/local \
                  -DCMAKE_CXX_COMPILER=g++ \
                  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          
            # Compilation réelle avec build-wrapper
            $BW --out-dir ../../bw-output/$SERVICE make -j$(nproc)
          
            # Copier compile_commands.json
            cp compile_commands.json ../../bw-output/$SERVICE/
            cd ../..
          done
          
          # Fusionner tous les compile_commands.json
          echo "[" > bw-output/compile_commands.json
          FIRST=true
          for SERVICE in "${SERVICES[@]}"; do
            FILE="$SERVICE/build/compile_commands.json"
            if [ -s "$FILE" ]; then
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                echo "," >> bw-output/compile_commands.json
              fi
              sed '1d;$d' "$FILE" >> bw-output/compile_commands.json
            fi
          done
          echo "]" >> bw-output/compile_commands.json
          
          echo "Build Wrapper compilation done, outputs in bw-output/"
    

      - name: Validate compile_commands.json
        run: |
          echo "Vérification du contenu de compile_commands.json :"
          cat bw-output/compile_commands.json
          echo
          echo "Nombre de commandes trouvées :"
          grep -c '"file":' bw-output/compile_commands.json || true

      - name: Generate coverage report
        run: |
          echo "Generating gcov coverage files..."
          rm -rf coverage
          mkdir coverage
          gcovr -r . --gcov-output -o coverage || echo "Coverage skipped (no .gcda files found)"

      - name: Check captured sources
        run: |
          echo "Files seen by build-wrapper:"
          grep '"file":' bw-output/build-wrapper-dump.json || echo "No captures found!"

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=secure-cloud
            -Dsonar.projectKey=barbara-vanni_secure-cloud
            -Dsonar.projectVersion=${{ github.run_number }}
            -Dsonar.cfamily.compile-commands=bw-output/compile_commands.json
            -Dsonar.cfamily.gcov.reportsPath=coverage
            -X
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
