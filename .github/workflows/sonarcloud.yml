#name: SonarCloud C++ Analysis
#
#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
#
#jobs:
#  sonarcloud:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0  # recommandé par Sonar pour l'annotation PR
#
#      # Optionnel mais utile : purge tout artefact local éventuel
#      - name: Clean workspace (sûr en CI)
#        run: |
#          git clean -fdx
#
#      - name: Install build tools
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y cmake g++ ninja-build jq
#
#      - name: Install system dev packages
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y \
#            libcurl4-openssl-dev \
#            libjsoncpp-dev \
#            libpq-dev \
#            libsqlite3-dev \
#            uuid-dev \
#            zlib1g-dev \
#            libssl-dev \
#            nlohmann-json3-dev \
#            libmysqlclient-dev \
#            git \
#            cmake g++ ninja-build jq pkg-config
#
#      - name: Build Drogon from source (no MySQL)
#        run: |
#          git clone --branch v1.8.7 --recurse-submodules https://github.com/drogonframework/drogon.git
#          cd drogon
#          mkdir build && cd build
#          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_MYSQL=OFF -DBUILD_POSTGRESQL=ON -DBUILD_SQLITE=ON -DBUILD_REDIS=OFF -DBUILD_BROTLI=OFF
#          sudo cmake --build . --target install -j$(nproc)
#
#      - name: Configure & build each microservice (CMake)
#        shell: bash
#        run: |
#          set -euo pipefail
#          # Adapte le glob ci-dessous à ton arbo (ex: services/*/ ou microservices/*/)
#          for d in */; do
#            [[ -f "$d/CMakeLists.txt" ]] || continue
#            echo "==> $d"
#            # On supprime toujours le build local pour éviter tout CMakeCache vérolé
#            rm -rf "$d/build"
#            cmake -S "$d" -B "$d/build" -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
#            cmake --build "$d/build" -- -v
#          done
#
#      - name: Merge compile_commands.json
#        run: |
#          mkdir -p bw-output
#          # Récupère tous les fichiers compile_commands.json générés par CMake
#          files=$(find . -path "*/build/compile_commands.json" -type f)
#          if [ -z "$files" ]; then
#            echo "Aucun compile_commands.json trouvé" >&2
#            exit 1
#          fi
#          # Fusion JSON propre avec jq
#          jq -s 'add' $files > bw-output/compile_commands.json
#          test -s bw-output/compile_commands.json
#
#      - name: Run SonarCloud Scan
#        uses: SonarSource/sonarcloud-github-action@v2
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        with:
#          args: >
#            -Dsonar.host.url=https://sonarcloud.io
#            -Dsonar.organization=secure-cloud
#            -Dsonar.projectKey=barbara-vanni_secure-cloud
#            -Dsonar.cfamily.compile-commands=bw-output/compile_commands.json
#            -X

name: SonarCloud C++ Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonarcloud:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # recommandé pour l’annotation des PR

      - name: Install system dev packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libjsoncpp-dev \
            libpq-dev \
            libsqlite3-dev \
            uuid-dev \
            zlib1g-dev \
            libssl-dev \
            nlohmann-json3-dev \
            git \
            cmake g++ gcc ninja-build jq pkg-config

      # Drogon sans MySQL (évite les soucis de détection MySQL sur Ubuntu 24.04)
      - name: Build Drogon from source (no MySQL)
        run: |
          git clone --branch v1.8.7 --recurse-submodules https://github.com/drogonframework/drogon.git
          cd drogon
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release \
                   -DBUILD_MYSQL=OFF \
                   -DBUILD_POSTGRESQL=ON \
                   -DBUILD_SQLITE=ON \
                   -DBUILD_REDIS=OFF \
                   -DBUILD_BROTLI=OFF
          sudo cmake --build . --target install -j"$(nproc)"

      # Nettoyage pour repartir d’un workspace propre
      - name: Clean workspace
        run: git clean -fdx

      # Adapte le glob si besoin (ex: services/*/ ou microservices/*/)
      - name: Configure & build each microservice (CMake)
        shell: bash
        run: |
          set -euo pipefail
          for d in */; do
            [[ -f "$d/CMakeLists.txt" ]] || continue
            echo "==> $d"
            rm -rf "$d/build"
            cmake -S "$d" -B "$d/build" -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -DCMAKE_C_COMPILER=/usr/bin/gcc \
              -DCMAKE_CXX_COMPILER=/usr/bin/g++
            cmake --build "$d/build" -- -v
          done

      - name: Merge compile_commands.json
        run: |
          mkdir -p bw-output
          files=$(find . -path "*/build/compile_commands.json" -type f)
          if [ -z "$files" ]; then
            echo "Aucun compile_commands.json trouvé" >&2
            exit 1
          fi
          jq -s 'add' $files > bw-output/compile_commands.json
          test -s bw-output/compile_commands.json

      # (Optionnel) Vérifie qu’on n’a plus de "c++" dans compile_commands.json
      - name: Sanity check compile_commands
        run: |
          if grep -q '"command": "c\+\+' bw-output/compile_commands.json; then
            echo "ERREUR: présence de 'c++' dans compile_commands.json"; exit 1;
          fi
          grep -E '"command": "(/usr/bin/)?g\+\+' -m 1 bw-output/compile_commands.json || { echo "ERREUR: pas de g++ détecté"; exit 1; }

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=secure-cloud
            -Dsonar.projectKey=barbara-vanni_secure-cloud
            -Dsonar.cfamily.compile-commands=bw-output/compile_commands.json
            -Dsonar.projectVersion=${{ github.run_number }}
            -Dsonar.verbose=true
